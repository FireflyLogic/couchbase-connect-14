{"Name":"Xamarin.Mobile","Id":477,"Alias":"xamarin.mobile","Description":"Xamarin.Mobile is an API for accessing common platform features, such as\r\nreading the user\u0027s address book and using the camera, across iOS,\r\nAndroid, and Windows Phone.\r\n\r\nThe goal of Xamarin.Mobile is to decrease the amount of\r\nplatform-specific code needed to perform common tasks in multiplatform\r\napps, making development simpler and faster.\r\n\r\nXamarin.Mobile is currently a preview release and is subject to API\r\nchanges.\r\n\r\n**Note:** The Windows Phone 7.1 version of the library requires the\r\nMicrosoft.Bcl.Async NuGet package. You\u0027ll need to restore this package\r\nto use the samples or download this package to any WP7 app using\r\nXamarin.Mobile.\r\n\r\n## Examples\r\n\r\nTo access the address book (requires `READ_CONTACTS` permissions\r\non Android):\r\n\r\n```csharp\r\nusing Xamarin.Contacts;\r\n// ...\r\n\r\nvar book = new AddressBook ();\r\n//         new AddressBook (this); on Android\r\nif (!await book.RequestPermission()) {\r\n\tConsole.WriteLine (\"Permission denied by user or manifest\");\r\n\treturn;\r\n}\r\n\r\nforeach (Contact contact in book.OrderBy (c =\u003e c.LastName)) {\r\n\tConsole.WriteLine (\"{0} {1}\", contact.FirstName, contact.LastName);\r\n}\r\n```\r\n\r\nTo get the user\u0027s location (requires `ACCESS_COARSE_LOCATION` and\r\n`ACCESS_FINE_LOCATION` permissions on Android):\r\n\r\n```csharp\r\nusing Xamarin.Geolocation;\r\n// ...\r\n\r\nvar locator = new Geolocator { DesiredAccuracy = 50 };\r\n//            new Geolocator (this) { ... }; on Android\r\n\r\nPosition position = await locator.GetPositionAsync (timeout: 10000);\r\n\r\nConsole.WriteLine (\"Position Status: {0}\", position.Timestamp);\r\nConsole.WriteLine (\"Position Latitude: {0}\", position.Latitude);\r\nConsole.WriteLine (\"Position Longitude: {0}\", position.Longitude);\r\n```\r\n\r\nTo take a photo:\r\n\r\n```csharp\r\nusing Xamarin.Media;\r\n// ...\r\n\r\nvar picker = new MediaPicker ();\r\nif (!picker.IsCameraAvailable)\r\n\tConsole.WriteLine (\"No camera!\");\r\nelse {\r\n\ttry {\r\n\t\tMediaFile file = await picker.TakePhotoAsync (new StoreCameraMediaOptions {\r\n\t\t\tName = \"test.jpg\",\r\n\t\t\tDirectory = \"MediaPickerSample\"\r\n\t\t});\r\n\r\n\t\tConsole.WriteLine (file.Path);\r\n\t} catch (OperationCanceledException) {\r\n\t\tConsole.WriteLine (\"Canceled\");\r\n\t}\r\n}\r\n```\r\n\r\nOn Android (requires `WRITE_EXTERNAL_STORAGE` permissions):\r\n\r\n```csharp\r\nusing Xamarin.Media;\r\n// ...\r\n\r\nprotected override void OnCreate (Bundle bundle)\r\n{\r\n\tvar picker = new MediaPicker (this);\r\n\tif (!picker.IsCameraAvailable)\r\n\t\tConsole.WriteLine (\"No camera!\");\r\n\telse {\r\n\t\tvar intent = picker.GetTakePhotoUI (new StoreCameraMediaOptions {\r\n\t\t\tName = \"test.jpg\",\r\n\t\t\tDirectory = \"MediaPickerSample\"\r\n\t\t});\r\n\t\tStartActivityForResult (intent, 1);\r\n\t}\r\n}\r\n\r\nprotected override async void OnActivityResult (int requestCode, Result resultCode, Intent data)\r\n{\r\n\t// User canceled\r\n\tif (resultCode == Result.Canceled)\r\n\t\treturn;\r\n\r\n\tMediaFile file = await data.GetMediaFileExtraAsync (this);\r\n\tConsole.WriteLine (file.Path);\r\n}\r\n```","Version":"0.7.1","Summary":"Xamarin.Mobile is a library that exposes a single set of APIs for accessing common mobile device functionality across iOS, Android and Windows platforms.","QuickStart":"## Examples\r\n\r\n### Contacts\r\nTo access the address book (requires `READ_CONTACTS` permissions\r\non Android):\r\n\r\n```csharp\r\nusing Xamarin.Contacts;\r\n// ...\r\n\r\nvar book = new AddressBook ();\r\nbook.RequestPermission().ContinueWith (t =\u003e {\r\n\tif (!t.Result) {\r\n\t\tConsole.WriteLine (\"Permission denied by user or manifest\");\r\n\t\treturn;\r\n\t}\r\n\r\n\tforeach (Contact contact in book.OrderBy (c =\u003e c.LastName)) {\r\n\t\tConsole.WriteLine (\"{0} {1}\", contact.FirstName, contact.LastName);\r\n\t}\r\n}, TaskScheduler.FromCurrentSynchronizationContext());\r\n```\r\n\r\n### Geolocation\r\n\r\nTo get the user\u0027s location (requires `ACCESS_COARSE_LOCATION` and\r\n`ACCESS_FINE_LOCATION` permissions on Android):\r\n\r\n```csharp\r\nusing Xamarin.Geolocation;\r\n// ...\r\n\r\nvar locator = new Geolocator { DesiredAccuracy = 50 };\r\n//            new Geolocator (this) { ... }; on Android\r\nlocator.GetPositionAsync (timeout: 10000).ContinueWith (t =\u003e {\r\n\tConsole.WriteLine (\"Position Status: {0}\", t.Result.Timestamp);\r\n\tConsole.WriteLine (\"Position Latitude: {0}\", t.Result.Latitude);\r\n\tConsole.WriteLine (\"Position Longitude: {0}\", t.Result.Longitude);\r\n}, TaskScheduler.FromCurrentSynchronizationContext());\r\n```\r\n\r\n### Media\r\n\r\n`MediaPicker` allows you to invoke the native UI to take or select photos or video. Given\r\nthat there is this UI interaction, the code (while simpler than doing it manually) will not\r\nbe completely cross-platform.\r\n\r\nTo take a photo on iOS, Windows Phone or WinRT:\r\n\r\n```csharp\r\nusing Xamarin.Media;\r\n// ...\r\n\r\nvar picker = new MediaPicker();\r\npicker.PickPhotoAsync().ContinueWith (t =\u003e {\r\n\tMediaFile file = t.Result;\r\n\tConsole.WriteLine (file.Path);\r\n}, TaskScheduler.FromCurrentSynchronizationContext());\r\n```\r\n\r\nOn Android and optionally on iOS, you control the UI.\r\n\r\nTo take a photo on Android (requires `WRITE_EXTERNAL_STORAGE` permissions):\r\n\r\n```csharp\r\nusing Xamarin.Media;\r\n// ...\r\n\r\nprotected override void OnCreate (Bundle bundle)\r\n{\r\n\tvar picker = new MediaPicker (this);\r\n\tif (!picker.IsCameraAvailable)\r\n\t\tConsole.WriteLine (\"No camera!\");\r\n\telse {\r\n\t\tvar intent = picker.GetTakePhotoUI (new StoreCameraMediaOptions {\r\n\t\t\tName = \"test.jpg\",\r\n\t\t\tDirectory = \"MediaPickerSample\"\r\n\t\t});\r\n\t\tStartActivityForResult (intent, 1);\r\n\t}\r\n}\r\n\r\nprotected override void OnActivityResult (int requestCode, Result resultCode, Intent data)\r\n{\r\n\t// User canceled\r\n\tif (resultCode == Result.Canceled)\r\n\t\treturn;\r\n\r\n\tdata.GetMediaFileExtraAsync (this).ContinueWith (t =\u003e {\r\n\t\tConsole.WriteLine (t.Result.Path);\r\n\t}, TaskScheduler.FromCurrentSynchronizationContext());\r\n}\r\n```\r\n\r\nTo take a photo on iOS controlling the UI:\r\n\r\n```csharp\r\nusing Xamarin.Media;\r\n// ...\r\n\r\nvar picker = new MediaPicker();\r\nMediaPickerController controller = picker.GetTakePhotoUI (new StoreCameraMediaOptions {\r\n\tName = \"test.jpg\",\r\n\tDirectory = \"MediaPickerSample\"\r\n});\r\n\r\n// On iPad, you\u0027ll use UIPopoverController to present the controller\r\nPresentViewController (controller, true, null);\r\n\r\ncontroller.GetResultAsync().ContinueWith (t =\u003e {\r\n\t// Dismiss the UI yourself\r\n\tcontroller.DismissViewController (true, () =\u003e {\r\n\t\tMediaFile file = t.Result;\r\n\t});\r\n\t\r\n}, TaskScheduler.FromCurrentSynchronizationContext());\r\n```","Hash":"02c420cca582ceca7318ad3483ca96c0","TargetPlatforms":["ios","android","winphone-7.0","winphone-7.1","mobile"],"TrialHash":null}